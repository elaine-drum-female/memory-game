{"version":3,"sources":["components/NavTabs.js","components/Hero/Title/index.js","components/Hero/index.js","components/RandomCards/index.js","App.js","serviceWorker.js","index.js"],"names":["NavTabs","props","react_default","a","createElement","className","displayMessage","score","topScore","Title","style","color","paddingTop","fontSize","Hero","backgroundImage","concat","children","Hero_Title","RandomCards","alt","name","src","image","App","state","randomcards","correctGuess","components_NavTabs","this","components_Hero","map","random","components_RandomCards","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fe646b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction NavTabs(props) {\r\n  return (\r\n    <div className=\"container-fluid bluepurpleBackground\">\r\n        <div className=\"row\">\r\n            <div className=\"col-lg-4\">\r\n                <h2>Clicky Game</h2>\r\n            </div>\r\n            <div className=\"col-lg-4\">\r\n                <h2><span>{props.displayMessage}</span></h2>\r\n            </div>\r\n            <div className=\"col-lg-4\">\r\n               <h2>Score : {props.score} | TopScore: {props.topScore}</h2>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavTabs;\r\n","import React from \"react\";\r\nimport \"../Title/style.css\";\r\n\r\nfunction Title(props) {\r\n    return (\r\n      <div>\r\n          <h2 style={{ color: `white`, paddingTop: `150px`, fontSize: `3em` }}>Clicky Game!</h2>\r\n          <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport Title from \"./Title/index\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction Hero(props) {\r\n    return (\r\n      <div className=\"hero text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\r\n        {props.children}\r\n        <Title />\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Hero;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nfunction RandomCards(props) {\r\n   \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n      <div className=\"col-lg-3\">\r\n         <div className=\"card\">\r\n            <div className=\"img-container\">\r\n               <img alt={props.name} src={props.image}  />\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-3\">\r\n         <div className=\"card\">\r\n            <div className=\"img-container\">\r\n               <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-3\">\r\n         <div className=\"card\">\r\n            <div className=\"img-container\">\r\n               <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-lg-3\">\r\n         <div className=\"card\">\r\n            <div className=\"img-container\">\r\n               <img alt={props.name} src={props.image} />\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default RandomCards;\r\n","import React , {Component } from 'react';\nimport NavTabs from \"./components/NavTabs\";\nimport Hero from \"./components/Hero/index\";\nimport RandomCards from \"./components/RandomCards/index\";\nimport randomcards from \"./randomcards.json\"\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    randomcards,\n    score:0,\n    topScore:0,\n    displayMessage: \"Click on an image to begin!\",\n    correctGuess: true\n  };\n\n//when game starts you have a random selection of images that display on page\n\n//when image is clicked\n  //HOW Do you know what image? SAVE in variable\n  //HOW do you know which image was clicked? FILTER through the ID\n  //WAS it set to click in the first place? true or false\n  \n    //if it was NOT set,\n      //State that the first index of that variable was NOT clicked\n      //Now set the variable index to true\n      //run the function for correctGuess\n      \n     //Make images go random\n       //create a function that will return random images\n    \n     //CorrectGuess Handler\n     //return setState correctGuess:\n  \n    //NOW that the image is correct \n      //check if the score increased by 1 more than the topScore\n       //set newState for topScore to be topScore + 1\n      \n       //ELSE \n       //update the state of:\n       //score: this.state.score + 1,\n       //update the displayMessage to \"you guessed correctly!\"\n     \n     //IncorrectGuess Handler\n\n     //setState of displayMessage to say: \"Incorrect!\"\n     //update correctGuess: false\n\n     //RESET GAME passing in the id\n\n     //again create variable\n     //make a for loop to loop over all of the images length\n     //then have all those image iterations clicked be set to false\n\n     //set its score back to 0\n  \n\nrender() {\n  return (\n    <div className=\"App\">\n    <NavTabs \n    score={this.state.score}\n    topScore={this.state.topScore}\n    displayMessage={this.state.displayMessage}\n    />\n    <Hero backgroundImage=\"https://www.toptal.com/designers/subtlepatterns/patterns/interlaced.png\"></Hero>\n    {this.state.randomcards.map(random => (\n    <RandomCards\n        image={random.image}\n        key={random.id}\n        name={random.name}\n        // Click handler \n      />\n      \n      ))}\n    </div>\n  );\n}\n}\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}